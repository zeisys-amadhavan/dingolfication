AWSTemplateFormatVersion: 2010-09-09
Parameters:
  0Organization:
    Type: String
    Description: Name of the Organization deploying the pipeline
  1Department:
    Type: String
    Description: Name of the Department deploying the pipeline
  2Project:
    Type: String
    Description: Name of the Project of the system being deployed
  3System:
    Type: String
    Description: Name of the System being deployed 
  4Component:
    Type: String
    Description: Name of the System Component being deployed 
  5SubComponent:
    Type: String
    Description: Name of the System Sub Component being deployed
  6Version:
    Type: String
    Description: Version of the system being deployed 
  7PipelineAccount:
    Type: String
    Description: Account in which pipeline is setup
  8PipelineRegion:
    Type: String
    Description: AWS Region in which pipeline is setup
  9PipelinePrefix:
    Type: String
    Description: Prefix to prepend with pipeline resources
  10MasterKmsKeyArn:
    Type: String
    Description: Arn of master Kms Key that is used to encrypt pipeline data and parameters                                        
  11PermissionsBoundary:
    Type: String
    Description: Permissions Boundary ARN for all roles  
  12NotificationSenderEmailAddress:
    Type: String
    Description: Email address to send notifications from   
  13PacRootDirectory:
    Type: String
    Description: root s3 directory containing directory with cfts for nested stacks               
Resources:
  CodePipelineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      PermissionsBoundary: !Ref 11PermissionsBoundary
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
                - cloudformation.amazonaws.com
                - sns.amazonaws.com
                - codebuild.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: permissionsfortherole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'
  S3BucketForPipelineArtifacts:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              KMSMasterKeyID: !GetAtt 
                - KMSKey
                - Arn
              SSEAlgorithm: 'aws:kms'
    DependsOn:
      - KMSKey
  KMSKey:
    Type: 'AWS::KMS::Key'
    Properties:
      Enabled: 'true'
      EnableKeyRotation: 'false'
      KeyUsage: ENCRYPT_DECRYPT
      PendingWindowInDays: '7'
      KeyPolicy:
        Version: 2012-10-17
        Id: key-default-1
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS:
                - '*'
            Action:
              - 'kms:Create*'
              - 'kms:Describe*'
              - 'kms:Enable*'
              - 'kms:List*'
              - 'kms:Put*'
              - 'kms:Update*'
              - 'kms:Revoke*'
              - 'kms:Disable*'
              - 'kms:Get*'
              - 'kms:Delete*'
              - 'kms:ScheduleKeyDeletion'
              - 'kms:CancelKeyDeletion'
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS:
                - '*'
            Action:
              - 'kms:DescribeKey'
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey'
              - 'kms:GenerateDataKeyWithoutPlaintext'
            Resource: '*'
  Repository:
    Type: 'AWS::ECR::Repository'
    Properties:
      RepositoryName: !Sub '${AWS::StackName}-repository'
      RepositoryPolicyText: 
        Version: "2012-10-17"
        Statement: 
          - 
            Sid: AllowPushPull
            Effect: Allow
            Principal: 
              AWS: 
                - "*"
            Action: 
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:BatchGetImage"
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:PutImage"
              - "ecr:InitiateLayerUpload"
              - "ecr:UploadLayerPart"
              - "ecr:CompleteLayerUpload"      
  Pipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      Name: !Sub '${AWS::StackName}-codepipeline'
      RoleArn: !GetAtt 
        - CodePipelineRole
        - Arn
      ArtifactStore:
        Location: !Ref S3BucketForPipelineArtifacts
        Type: S3
        EncryptionKey:
          Id: !GetAtt 
            - KMSKey
            - Arn
          Type: KMS
      Stages:

+Stages

    DependsOn:
      - KMSKey

+Projects

  EventRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: EventRule
      EventPattern:
        source:
          - aws.codepipeline
        detail-type:
          - CodePipeline Pipeline Execution State Change
          - CodePipeline Action Execution State Change
          - CodePipeline Stage Execution State Change
        detail:
          pipeline:
            - !Sub '${AWS::StackName}-codepipeline-${AWS::AccountId}'
      State: ENABLED
      Targets:
        - Arn: !Ref NotificationSNSTopic
          Id: PipelineNotificationTopic
          InputTransformer:
            InputTemplate: >-
              "The pipeline: <pipeline>, stage: <stage> has <state>. For more
              information
              https://console.aws.amazon.com/codepipeline/home?region=us-east-1#/view/<pipeline>" 
            InputPathsMap:
              pipeline: $.detail.pipeline
              stage: $.detail.stage
              state: $.detail.state
    DependsOn:
      - NotificationSNSTopic
  NotificationSNSTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      Subscription:
        - Endpoint: !Ref 12NotificationSenderEmailAddress
          Protocol: email

  SNSPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument: !Sub |-
        {
          "Version": "2008-10-17",
          "Id": "__default_policy_ID",
          "Statement": [
            {
              "Sid": "__default_statement_ID",
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": [
                "SNS:GetTopicAttributes",
                "SNS:SetTopicAttributes",
                "SNS:AddPermission",
                "SNS:RemovePermission",
                "SNS:DeleteTopic",
                "SNS:Subscribe",
                "SNS:ListSubscriptionsByTopic",
                "SNS:Publish",
                "SNS:Receive"
              ],
              "Resource": "*",
              "Condition": {
                "StringEquals": {
                  "AWS:SourceOwner": "${AWS::AccountId}"
                }
              }
            },
            {
              "Sid": "event_permission",
              "Effect": "Allow",
              "Principal": {
                "Service": ["events.amazonaws.com","codepipeline.amazonaws.com"]
              },
              "Action": "sns:Publish",
              "Resource": "*"
            }
          ]
        }      
      Topics:
        - !Ref NotificationSNSTopic

    DependsOn:
      - NotificationSNSTopic
      - EventRule
  ApprovalLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role: !GetAtt 
        - LambdaRole
        - Arn
      Runtime: python3.9
      Description: !Sub Lambda to approve stages in pipelines
      Code:
        ZipFile: |-
          import json
          import logging
          import re
          import time
          import boto3

          logger = logging.getLogger(__name__)
          logger.setLevel(logging.INFO)
          MAX_WAIT_FOR_RESPONSE = 10
          WAIT_INCREMENT = 1

          def handler(event, context):
            logger.info('REQUEST RECEIVED:\n %s', event)
            logger.info('REQUEST RECEIVED:\n %s', context)
            pipeline = event["queryStringParameters"]['pipeline']
            stage = event["queryStringParameters"]['stage']
            action = event["queryStringParameters"]['action']
            approval_action = event["queryStringParameters"]['approval_action']
            pipelineexecutionid = event["queryStringParameters"]['pipelineexecutionid']
            client = boto3.client('codepipeline')
            r = client.get_pipeline_state(name=pipeline)['stageStates']
            print(r)
            s = next((x for x in r if x['stageName'] == stage and x['latestExecution']['pipelineExecutionId'] == pipelineexecutionid ), None)
            print(s)
            s1 = s['actionStates']
            print(s1)
            s2 = next((y for y in s1 if y['actionName'] == approval_action ), None)
            print(s2)
            t = s2['latestExecution']['token']
            print(t)
            client.put_approval_result(
                pipelineName=pipeline,
                stageName=stage,
                actionName=approval_action,
                result={
                    'summary': 'Automatically approved by Lambda.',
                    'status': action
                },
                token=t
            )
            logger.info("Status message: %s", client.put_approval_result)
            if action == 'Approved':
              return {"statusCode": 200, "body": json.dumps('Thank you for approving the release!!')}
            elif action == 'Rejected':
              return {"statusCode": 200, "body": json.dumps('Thank you for rejecting the release!!')}
    DependsOn:
      - LambdaRole
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      PermissionsBoundary: !Ref 11PermissionsBoundary
      Policies:
        - PolicyName: lambdas3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'logs:CreateLogGroup'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
              - Effect: Allow
                Action: '*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*'
  ApprovalLambdaApiGatewayRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      ApiKeySourceType: HEADER
      Description: An API Gateway to integrate with pipelineApprovalLambda
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Sub '${AWS::StackName}-${AWS::AccountId}-pipelineApprovalLambda-api'
    DependsOn:
      - ApprovalLambda
  ApprovalLambdaApiGatewayResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt 
        - ApprovalLambdaApiGatewayRestApi
        - RootResourceId
      PathPart: pipeline-approval
      RestApiId: !Ref ApprovalLambdaApiGatewayRestApi
    DependsOn:
      - ApprovalLambda
  ApprovalLambdaApiGatewayMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      RequestParameters:
        method.request.querystring.action: true
        method.request.querystring.pipeline: true
        method.request.querystring.pipelineexecutionid: true
        method.request.querystring.stage: true
        method.request.querystring.approval_action: true
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt 
          - ApprovalLambdaApiGatewayIamRole
          - Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApprovalLambda.Arn}/invocations
      OperationName: lambda
      ResourceId: !Ref ApprovalLambdaApiGatewayResource
      RestApiId: !Ref ApprovalLambdaApiGatewayRestApi
    DependsOn:
      - ApprovalLambda
  ApprovalLambdaApiGatewayModel:
    Type: 'AWS::ApiGateway::Model'
    Properties:
      ContentType: application/json
      RestApiId: !Ref ApprovalLambdaApiGatewayRestApi
      Schema: {}
    DependsOn:
      - ApprovalLambda
  ApprovalLambdaApiGatewayStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref ApprovalLambdaApiGatewayDeployment
      Description: Approval Lambda API Stage v0
      RestApiId: !Ref ApprovalLambdaApiGatewayRestApi
      StageName: v0
    DependsOn:
      - ApprovalLambda
  ApprovalLambdaApiGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      Description: Approval Lambda API Deployment
      RestApiId: !Ref ApprovalLambdaApiGatewayRestApi
    DependsOn:
      - ApprovalLambda
      - ApprovalLambdaApiGatewayMethod
  ApprovalLambdaApiGatewayIamRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      PermissionsBoundary: !Ref 11PermissionsBoundary
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'
    DependsOn:
      - ApprovalLambda
  ConfigLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - ApprovalLambdaApiGatewayRestApi
      - ApprovalLambda
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref ApprovalLambda
      Principal: apigateway.amazonaws.com
  CleanupEcrLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt 
        - LambdaRole
        - Arn
      Runtime: python3.9
      Description: Test with Cloud Formation
      Code:
        ZipFile: |-
          import json
          import logging
          import signal
          import boto3
          import urllib
          
          s3 = boto3.resource('s3')
          ecr = boto3.client('ecr')
          LOGGER = logging.getLogger()
          LOGGER.setLevel(logging.INFO)
          def lambda_handler(event, context):
              ecrreponame = event['ResourceProperties']['EcrRepoName']
              bucketname = event['ResourceProperties']['BucketName']
              accountid = boto3.client('sts').get_caller_identity()['Account']
              try:
                  LOGGER.info('REQUEST RECEIVED:\n %s', event)
                  LOGGER.info('REQUEST RECEIVED:\n %s', context)
                  if event['RequestType'] == 'Create':
                      LOGGER.info('CREATE!')
                      send_response(event, context, "SUCCESS",
                                    {"Message": "No Action during Create!"})
                  elif event['RequestType'] == 'Update':
                      LOGGER.info('UPDATE!')
                      send_response(event, context, "SUCCESS",
                                    {"Message": "No Action during Update!"})
                  elif event['RequestType'] == 'Delete':
                      LOGGER.info('DELETE!')
                      response = ecr.delete_repository(registryId=accountid,repositoryName=ecrreponame,force=True)
                      bucket = s3.Bucket(bucketname)
                      bucket.objects.all().delete()
                      bucket.delete()
                      send_response(event, context, "SUCCESS",
                                    {"Message": "Resource deletion successful!"})
                  else:
                      LOGGER.info('FAILED!')
                      send_response(event, context, "FAILED",
                                    {"Message": "Unexpected event received from CloudFormation"})
              except: #pylint: disable=W0702
                  LOGGER.info('FAILED!')
                  send_response(event, context, "FAILED", {
                      "Message": "Exception during processing"})
          def send_response(event, context, response_status, response_data):
              '''Send a resource manipulation status response to CloudFormation'''
              response_body = json.dumps({
                  "Status": response_status,
                  "Reason": "See the details in CloudWatch Log Stream: " + context.log_stream_name,
                  "PhysicalResourceId": context.log_stream_name,
                  "StackId": event['StackId'],
                  "RequestId": event['RequestId'],
                  "LogicalResourceId": event['LogicalResourceId'],
                  "Data": response_data
              })
              LOGGER.info('ResponseURL: %s', event['ResponseURL'])
              LOGGER.info('ResponseBody: %s', response_body)
              opener = urllib.request.build_opener(urllib.request.HTTPHandler)
              request = urllib.request.Request(event['ResponseURL'], data=response_body.encode("utf-8"))
              request.add_header('Content-Type', '')
              request.add_header('Content-Length', len(response_body))
              request.get_method = lambda: 'PUT'
              response = opener.open(request)
              LOGGER.info("Status code: %s", response.getcode())
              LOGGER.info("Status message: %s", response.msg)
              
      Tags:
        - Key: Name
          Value: !Sub 'cft-stack-${AWS::StackName}-cleanupecrlambda'
        - Key: Purpose
          Value: This is a key pair to delete ecr created by a CFT
    DependsOn:
      - LambdaRole
  LambdaInvoke:
    Type: 'Custom::Invoker'
    Properties:
      Description: This is the invoker to invoke the S3 and ECR delete function
      ServiceToken: !Sub >-
        arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${CleanupEcrLambda}
      EcrRepoName: !Ref Repository
      BucketName: !Ref S3BucketForPipelineArtifacts
    DependsOn:
      - CleanupEcrLambda
Outputs:
  CodePipelineUrl:
    Value: !Sub >-
      https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${Pipeline}
    Description: CodePipeline URL
  CodePipelineRoleArn:
    Value: !GetAtt CodePipelineRole.Arn
    Description: CodePipeline Role Arn

