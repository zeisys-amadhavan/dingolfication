version: 0.2
phases:
  build:
    commands:
      - accountId=$(aws sts get-caller-identity --query Account --output text)
      - aws s3 cp s3://$temp_storage_location/$PackageStorageSubdirectory/ . --recursive
      - ls
      - unzip -d package $PackageStorageFilename
      - cd package
      - ls
      - chmod +x source-info.yaml
      - source ./source-info.yaml
      - |
        if [ -z "$XORole" ]
        then
          echo "Deploying into the same account"
        else
          echo "Setting cross-account acccess"
          eval $(aws sts assume-role --role-arn $XORole --role-session-name deploy-stage-access | jq -r '.Credentials | "export AWS_ACCESS_KEY_ID=\(.AccessKeyId)\nexport AWS_SECRET_ACCESS_KEY=\(.SecretAccessKey)\nexport AWS_SESSION_TOKEN=\(.SessionToken)\n"')
        fi
      - aws s3 cp s3://$PipelineName-$Env/$PipelineName-$Env.pem $PipelineName-$Env.pem
      - chmod 400 $PipelineName-$Env.pem
      - instanceId=$(aws cloudformation list-stack-resources --stack-name $PipelineName-$Env --query "StackResourceSummaries[?(ResourceType=='AWS::EC2::Instance')].PhysicalResourceId" --output text)
      - aws ec2 wait instance-status-ok --instance-ids $instanceId;
      - |
        for id in $instanceId; 
        do 
          echo $id
          instanceUrl=$(aws cloudformation describe-stacks --stack-name $PipelineName-$Env --query 'Stacks[].Outputs[?OutputKey==`ExternalUrl`].OutputValue[]' --output text)
          instanceIp=$(echo $instanceUrl | sed 's/https\?:\/\///')
          ssh -o StrictHostKeyChecking=no -i $PipelineName-$Env.pem ec2-user@$instanceIp 'sudo yum update -y'
          ssh -o StrictHostKeyChecking=no -i $PipelineName-$Env.pem ec2-user@$instanceIp 'sudo amazon-linux-extras install -y docker'
          ssh -o StrictHostKeyChecking=no -i $PipelineName-$Env.pem ec2-user@$instanceIp 'sudo yum install -y docker'
          ssh -o StrictHostKeyChecking=no -i $PipelineName-$Env.pem ec2-user@$instanceIp 'sudo systemctl enable docker'
          ssh -o StrictHostKeyChecking=no -i $PipelineName-$Env.pem ec2-user@$instanceIp 'sudo systemctl start docker'
        done
